{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormGroup, Validators } from '@angular/forms';\nimport { validate, clean, format } from 'rut.js'; //Librería para notificaciones\n\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/comunication-services.service\";\nimport * as i4 from \"@angular/common\";\n\nfunction RegistrarComponent_small_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 29);\n    i0.ɵɵtext(1, \"Campo requirido\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegistrarComponent_small_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 29);\n    i0.ɵɵtext(1, \"Campo requirido\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegistrarComponent_small_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 29);\n    i0.ɵɵtext(1, \"RUT incorrecto\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegistrarComponent_small_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 29);\n    i0.ɵɵtext(1, \"Fono no v\\u00E1lido\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegistrarComponent_option_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const banco_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", banco_r7.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", banco_r7.name, \" \");\n  }\n}\n\nfunction RegistrarComponent_small_64_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 29);\n    i0.ɵɵtext(1, \"Email no v\\u00E1lido\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegistrarComponent_small_70_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 29);\n    i0.ɵɵtext(1, \"Campo requirido\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let RegistrarComponent = /*#__PURE__*/(() => {\n  class RegistrarComponent {\n    //Inyección de dependencias en el oonstructor\n    constructor(fb, router, _cs) {\n      this.fb = fb;\n      this.router = router;\n      this._cs = _cs; //Array de RUT's no validos\n\n      this.noValidos = ['19', '1111111', '2222222', '3333333', '4444444', '5555555', '6666666', '7777777', '8888888', '9999999', '1234567', '7654321', '11111111', '22222222', '33333333', '44444444', '55555555', '66666666', '77777777', '88888888', '99999999', '12345678', '87654321']; //RegExp para validar correos en JS\n\n      this.emailPattern = '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\\\.[A-Za-z0-9-]+)*(\\\\.[A-Za-z]{2,})$';\n    } //1. Crear el formulario una vez inicia Angular\n    //2. Se obtiene el listado de bancos desde la URL php\n\n\n    ngOnInit() {\n      this.crearFormulario();\n      this.getBankList();\n    }\n    /**\n     * Definicion de Getter's parar la validacion de formularios\n     * los metodos GET devuelven un booleano según la evaluación\n     * y son invocados por angular dentro del html como si fueran un observable\n     */\n\n\n    get nombreNoValido() {\n      return this.datosTransferencia.get('nombre').invalid && this.datosTransferencia.get('nombre').touched;\n    }\n\n    get apellidoNoValido() {\n      return this.datosTransferencia.get('apellido').invalid && this.datosTransferencia.get('apellido').touched;\n    }\n\n    get emailNoValido() {\n      return this.datosTransferencia.get('email').invalid && this.datosTransferencia.get('email').touched;\n    }\n\n    get rutNoValido() {\n      return this.datosTransferencia.get('rut').invalid && this.datosTransferencia.get('rut').touched;\n    }\n\n    get telefonoNoValido() {\n      return this.datosTransferencia.get('telefono').invalid && this.datosTransferencia.get('telefono').touched;\n    }\n\n    get cuentanoValido() {\n      return this.datosTransferencia.get('cuenta').invalid && this.datosTransferencia.get('cuenta').touched;\n    }\n\n    get tipoCuentanoValido() {\n      return this.datosTransferencia.get('tipo_cuenta').invalid && this.datosTransferencia.get('cuenta').touched;\n    }\n\n    get rut() {\n      return this.datosTransferencia.get('rut');\n    } //Obtener los datos para los campos SELECT\n\n\n    getBankList() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let bancos = JSON.parse(localStorage.getItem('bancos') || '{}');\n\n        if (Object.keys(bancos).length > 0) {\n          this.bancos = bancos;\n        } else {\n          this._cs.getBankList().subscribe(response => {\n            if (response) {\n              this.bancos = response;\n              localStorage.setItem('bancos', JSON.stringify(this.bancos));\n              console.log('Registrar', JSON.stringify(this.bancos, null, 2));\n            }\n          }, error => {\n            Swal.fire({\n              title: 'Fallas en la comunicación',\n              text: `<p> ${error.message} <p>`,\n              toast: true\n            });\n          });\n        }\n      });\n    }\n    /**\n     * Metodo para instanciar el formulario Reactivo\n     */\n\n\n    crearFormulario() {\n      return __awaiter(this, void 0, void 0, function* () {\n        //Se crea la instancia FromGroup para el formulario reactivo\n        //Definiendo las reglas de validacion para cada campo del formulario\n        this.datosTransferencia = this.fb.group({\n          nombre: ['', [Validators.required, Validators.minLength(3), Validators.pattern('^[a-zA-ZzñÑáéíóúÁÉÍÓÚ]+$')]],\n          apellido: ['', [Validators.required, Validators.minLength(3), Validators.pattern('^[a-zA-ZzñÑáéíóúÁÉÍÓÚ]+$')]],\n          email: ['', [Validators.required, Validators.pattern(this.emailPattern)]],\n          rut: ['', [Validators.required]],\n          telefono: ['', [Validators.required]],\n          cuenta: ['', [Validators.required]],\n          tipo_cuenta: ['', [Validators.required]],\n          banco: ['', [Validators.required]]\n        });\n      });\n    }\n    /**\n     * Metodo para enviar formulario al servicio e inscribir nueva cuenta\n     *\n     */\n\n\n    enviarFormulario() {\n      return __awaiter(this, void 0, void 0, function* () {\n        //Si el formulario no es valido entonces se hace una evaluación de cada uno\n        //de los elementos reactivos y se hace resaltar en la vista cuales son los\n        //elementos no validos\n        if (this.datosTransferencia.invalid) {\n          return Object.values(this.datosTransferencia.controls).forEach(control => {\n            if (control instanceof FormGroup) {\n              Object.values(control.controls).forEach(control => control.markAsTouched());\n            }\n          });\n        } //Si es valido entonces deebmos cargar un loading en la Vista\n        //TODO: SwalFire\n\n\n        Swal.fire({\n          title: 'Deseas guardar el destinatario',\n          icon: 'warning',\n          confirmButtonText: 'Sí, guardar',\n          cancelButtonText: 'Cancelar',\n          showLoaderOnConfirm: true,\n          allowOutsideClick: false,\n          preConfirm: () => {\n            //El metodo preConfirm de Swal permite ejecutar una llamada ASYNC al servicio y esperar\n            //la respuesta para continuar con la ejecución\n            //Necesito recoger el rut del cliente\n            let login = JSON.parse(localStorage.getItem('login'));\n\n            if (Object.keys(login).length > 0) {\n              return this._cs.guardarFormulario(login.usuario.rut, this.datosTransferencia.value).then(res => {\n                if (res.ok) {\n                  return res.body;\n                } else {\n                  return null;\n                }\n              }).catch(error => {\n                console.log(error.message);\n                Swal.fire(`Ocurrio un error! ${error.message}`);\n              });\n            } else {\n              return null;\n            }\n          }\n        }).then(result => {\n          if (result.isConfirmed) {\n            console.log(result.value);\n            Swal.fire(`Los datos fueron guardados correctamente`);\n            this.datosTransferencia.reset();\n            /* this.router.navigateByUrl('/', {\n                state: {\n                    message: 'Todo OK, eres vergatario',\n                },\n            }); */\n          }\n        });\n      });\n    }\n    /**\n     * Metodo para verificar y formatear el RUT del nuevo destinatario\n     * @param e (event)\n     */\n\n\n    verificarRut(e) {\n      let esRutValido = this.noValidos.includes(e.target.value);\n      console.log('Es RUT Valido: ' + esRutValido); //El rango inferior del RUT\n\n      let esMayor = parseInt(e.target.value) > 1000000; //El Rango Superior del RUT\n\n      let esMenor = parseInt(e.target.value) < 50000000; //Si el RUT es valido y se mantiene en el rango\n\n      if (!esRutValido || !esMenor && !esMayor) {\n        let cleanValue = clean(e.target.value);\n        let esValido = validate(cleanValue);\n        let formateado = format(cleanValue);\n\n        if (!esValido) {\n          this.rut.setErrors({\n            rutNovalido: true\n          });\n          this.rut.markAsDirty();\n        } else {\n          this.rut.setErrors(null);\n          this.rut.setValue(formateado);\n        }\n      } else {\n        this.rut.setErrors({\n          rutNovalido: true\n        });\n        this.rut.markAsDirty();\n      }\n    }\n\n  }\n\n  RegistrarComponent.ɵfac = function RegistrarComponent_Factory(t) {\n    return new (t || RegistrarComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ComunicationService));\n  };\n\n  RegistrarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegistrarComponent,\n    selectors: [[\"app-registrar\"]],\n    decls: 77,\n    vars: 22,\n    consts: [[1, \"container\"], [1, \"text-center\", \"mt-5\"], [1, \"row\"], [1, \"col-lg-7\", \"mx-auto\"], [1, \"card\", \"mt-2\", \"mx-auto\", \"p-4\", \"bg-light\"], [1, \"card-body\", \"bg-light\"], [\"id\", \"msform\", \"autocomplete\", \"off\", 3, \"formGroup\", \"ngSubmit\"], [1, \"controls\"], [1, \"col-md-6\"], [1, \"form-group\"], [1, \"fieldlabels\"], [\"class\", \"danger\", 4, \"ngIf\"], [\"type\", \"text\", \"placeholder\", \"Nombre\", \"formControlName\", \"nombre\", 1, \"form-control\"], [\"type\", \"text\", \"placeholder\", \"Apellido\", \"formControlName\", \"apellido\", 1, \"form-control\"], [\"type\", \"text\", \"formControlName\", \"rut\", \"placeholder\", \"RUT\", 1, \"form-control\", 3, \"keyup\"], [\"for\", \"\", 1, \"fieldlabels\", \"text-right\"], [\"type\", \"phone\", \"placeholder\", \"Fono\", \"formControlName\", \"telefono\", 1, \"form-control\"], [\"name\", \"\", \"id\", \"\", \"formControlName\", \"banco\", 1, \"form-control\"], [\"value\", \"NONE\", 1, \"option\", 3, \"selected\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"name\", \"\", \"id\", \"\", \"formControlName\", \"tipo_cuenta\", 1, \"form-control\"], [\"value\", \"0\", 1, \"option\", 3, \"selected\"], [\"value\", \"Cuenta Vista / RUT\", 1, \"option\"], [\"value\", \"Cuenta Ahorros\", 1, \"option\"], [\"for\", \"\", 1, \"fieldlabels\"], [\"type\", \"email\", \"placeholder\", \"Email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"type\", \"text\", \"placeholder\", \"N\\u00FAmero de cuenta\", \"formControlName\", \"cuenta\", 1, \"form-control\"], [1, \"col-lg-12\"], [\"type\", \"submit\", \"value\", \"Registrar\", 1, \"btn\", \"btn-success\", \"btn-send\", \"pt-2\", \"btn-block\"], [1, \"danger\"], [3, \"value\"]],\n    template: function RegistrarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n        i0.ɵɵtext(3, \"Agregar nuevo destinatario\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"div\", 4)(7, \"div\", 5)(8, \"div\", 0)(9, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function RegistrarComponent_Template_form_ngSubmit_9_listener() {\n          return ctx.enviarFormulario();\n        });\n        i0.ɵɵelementStart(10, \"div\", 7)(11, \"div\", 2)(12, \"div\", 8)(13, \"div\", 9)(14, \"label\", 10);\n        i0.ɵɵtext(15, \"Nombre: *\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, RegistrarComponent_small_16_Template, 2, 0, \"small\", 11);\n        i0.ɵɵelement(17, \"input\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 8)(19, \"div\", 9)(20, \"label\", 10);\n        i0.ɵɵtext(21, \"Apellido: *\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, RegistrarComponent_small_22_Template, 2, 0, \"small\", 11);\n        i0.ɵɵelement(23, \"input\", 13);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"div\", 2)(25, \"div\", 8)(26, \"div\", 9)(27, \"label\", 10);\n        i0.ɵɵtext(28, \"RUT: *\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(29, RegistrarComponent_small_29_Template, 2, 0, \"small\", 11);\n        i0.ɵɵelementStart(30, \"input\", 14);\n        i0.ɵɵlistener(\"keyup\", function RegistrarComponent_Template_input_keyup_30_listener($event) {\n          return ctx.verificarRut($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(31, \"div\", 8)(32, \"div\", 9)(33, \"label\", 15);\n        i0.ɵɵtext(34, \" Fono: *\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(35, RegistrarComponent_small_35_Template, 2, 0, \"small\", 11);\n        i0.ɵɵelement(36, \"input\", 16);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(37, \"div\", 2)(38, \"div\", 8)(39, \"div\", 9)(40, \"label\", 10);\n        i0.ɵɵtext(41, \"Banco: *\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"select\", 17)(43, \"option\", 18);\n        i0.ɵɵtext(44, \"-- Seleccione --\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(45, RegistrarComponent_option_45_Template, 2, 2, \"option\", 19);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(46, \"div\", 8)(47, \"div\", 9)(48, \"label\", 10);\n        i0.ɵɵtext(49, \"Tipo de cuenta: *\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"select\", 20)(51, \"option\", 21);\n        i0.ɵɵtext(52, \"-- Seleccione --\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"option\", 22);\n        i0.ɵɵtext(54, \"Cuenta Vista / RUT\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"option\", 23);\n        i0.ɵɵtext(56, \"Cuenta Ahorros\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"option\", 23);\n        i0.ɵɵtext(58, \"Cuenta Corriente\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(59, \"div\", 2)(60, \"div\", 8)(61, \"div\", 9)(62, \"label\", 24);\n        i0.ɵɵtext(63, \" Email: *\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(64, RegistrarComponent_small_64_Template, 2, 0, \"small\", 11);\n        i0.ɵɵelement(65, \"input\", 25);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(66, \"div\", 8)(67, \"div\", 9)(68, \"label\", 10);\n        i0.ɵɵtext(69, \"N\\u00FAmero de cuenta: *\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(70, RegistrarComponent_small_70_Template, 2, 0, \"small\", 11);\n        i0.ɵɵelement(71, \"input\", 26);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(72, \"div\")(73, \"div\", 2)(74, \"div\", 27)(75, \"div\", 9);\n        i0.ɵɵelement(76, \"input\", 28);\n        i0.ɵɵelementEnd()()()()()()()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"formGroup\", ctx.datosTransferencia);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.nombreNoValido);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-invalid\", ctx.nombreNoValido);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.apellidoNoValido);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-invalid\", ctx.apellidoNoValido);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.rutNoValido);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-invalid\", ctx.rutNoValido);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailNoValido);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-invalid\", ctx.telefonoNoValido);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"selected\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.bancos.banks);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"selected\", true);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailNoValido);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-invalid\", ctx.emailNoValido);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.cuentanoValido);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-invalid\", ctx.cuentanoValido);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"body[_ngcontent-%COMP%]{font-family:Lato,sans-serif}h1[_ngcontent-%COMP%]{margin-bottom:40px}label[_ngcontent-%COMP%]{color:#333}.btn-send[_ngcontent-%COMP%]{font-weight:300;text-transform:uppercase;letter-spacing:.2em;width:80%;margin-left:3px}.help-block.with-errors[_ngcontent-%COMP%]{color:#ff5050;margin-top:5px}.card[_ngcontent-%COMP%]{margin-left:10px;margin-right:10px}\"]\n  });\n  return RegistrarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}