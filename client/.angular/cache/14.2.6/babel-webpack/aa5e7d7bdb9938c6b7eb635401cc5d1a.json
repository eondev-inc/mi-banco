{"ast":null,"code":"function clean(rut) {\n  return typeof rut === 'string' ? rut.replace(/^0+|[^0-9kK]+/g, '').toUpperCase() : '';\n}\n\nfunction validate(rut) {\n  if (typeof rut !== 'string') {\n    return false;\n  } // if it starts with 0 we return false\n  // so a rut like 00000000-0 will not pass\n\n\n  if (/^0+/.test(rut)) {\n    return false;\n  }\n\n  if (!/^0*(\\d{1,3}(\\.?\\d{3})*)-?([\\dkK])$/.test(rut)) {\n    return false;\n  }\n\n  rut = clean(rut);\n  let t = parseInt(rut.slice(0, -1), 10);\n  let m = 0;\n  let s = 1;\n\n  while (t > 0) {\n    s = (s + t % 10 * (9 - m++ % 6)) % 11;\n    t = Math.floor(t / 10);\n  }\n\n  const v = s > 0 ? '' + (s - 1) : 'K';\n  return v === rut.slice(-1);\n}\n\nfunction format(rut, options = {\n  dots: true\n}) {\n  rut = clean(rut);\n  let result;\n\n  if (options.dots) {\n    result = rut.slice(-4, -1) + '-' + rut.substr(rut.length - 1);\n\n    for (let i = 4; i < rut.length; i += 3) {\n      result = rut.slice(-3 - i, -i) + '.' + result;\n    }\n  } else {\n    result = rut.slice(0, -1) + '-' + rut.substr(rut.length - 1);\n  }\n\n  return result;\n}\n\nfunction getCheckDigit(input) {\n  const rut = Array.from(clean(input), Number);\n\n  if (rut.length === 0 || rut.includes(NaN)) {\n    throw new Error(`\"${input}\" as RUT is invalid`);\n  }\n\n  const modulus = 11;\n  const initialValue = 0;\n  const sumResult = rut.reverse().reduce((accumulator, currentValue, index) => accumulator + currentValue * (index % 6 + 2), initialValue);\n  const checkDigit = modulus - sumResult % modulus;\n\n  if (checkDigit === 10) {\n    return 'K';\n  } else if (checkDigit === 11) {\n    return '0';\n  } else {\n    return checkDigit.toString();\n  }\n}\n\nmodule.exports = {\n  validate,\n  clean,\n  format,\n  getCheckDigit\n};","map":null,"metadata":{},"sourceType":"script"}