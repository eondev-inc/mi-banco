{"ast":null,"code":"import { clean } from 'rut.js';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ComunicationService = /*#__PURE__*/(() => {\n  class ComunicationService {\n    //Constructor donde inyectan dependencias para conexion\n    constructor(_client) {\n      this._client = _client;\n    }\n    /**\n     * Método para obtener el listado de bancos desde la URL\n     * @returns observable\n     */\n\n\n    getBankList() {\n      return this._client.get(environment.banksUrl);\n    }\n    /**\n     * Metodo para guardar un nuevo destinatario de fondos de pensions ;D\n     * @param FormGroup values\n     * @return Observable\n     */\n\n\n    guardarFormulario(rut_cliente, data) {\n      //TODO: Definir el objeto que debe ser enviado al servicio\n      let requestData = {\n        rut_destinatario: clean(data.rut),\n        nombre: data.nombre.trim(),\n        apellido: data.apellido.trim(),\n        email: data.email.trim(),\n        telefono: data.telefono.trim(),\n        banco: data.banco.trim(),\n        numero_cuenta: data.cuenta.trim(),\n        tipo_cuenta: data.tipo_cuenta.trim(),\n        rut_cliente: clean(rut_cliente.trim())\n      };\n      return this._client.post(`${environment.apiUrl}/cuentas`, requestData, {}).toPromise();\n    }\n    /**\n     * Metodo para obtener la lista de destinatarios de un usuario en particular\n     */\n\n\n    obtenerDestinatarios(userId) {\n      return this._client.get(`${environment.apiUrl}/destinatarios`, {\n        params: {\n          user_id: userId\n        }\n      });\n    }\n\n    obtenerHistorial(rut) {\n      return this._client.get(`${environment.apiUrl}/transferencias`, {\n        params: {\n          rut: clean(rut)\n        }\n      });\n    }\n\n    usuarioLogin(data) {\n      return this._client.get(`${environment.apiUrl}/usuario`, {\n        params: {\n          rut: clean(data.rut.trim()),\n          password: data.password.trim()\n        }\n      });\n    }\n\n    guardarTransferencia(rut_cliente, data) {\n      return this._client.post(`${environment.apiUrl}/transferencias`, {\n        rut_destinatario: clean(data.rut_destinatario.trim()),\n        rut_cliente: rut_cliente,\n        nombre: data.nombre.trim(),\n        banco: data.banco.trim(),\n        tipo_cuenta: data.tipo_cuenta.trim(),\n        monto: data.monto\n      }, {}).toPromise();\n    }\n\n    registroUsuario(data) {\n      return this._client.post(`${environment.apiUrl}/usuario`, {\n        nombre: data.nombre.trim(),\n        email: data.email.trim(),\n        rut: clean(data.rut.trim()),\n        password: data.password.trim()\n      }, {}).toPromise();\n    }\n\n    buscarDestinatarios(rut) {\n      return this._client.get(`${environment.apiUrl}/cuentas`, {\n        params: {\n          rut: clean(rut.trim())\n        }\n      });\n    }\n\n  }\n\n  ComunicationService.ɵfac = function ComunicationService_Factory(t) {\n    return new (t || ComunicationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ComunicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ComunicationService,\n    factory: ComunicationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ComunicationService;\n})();","map":null,"metadata":{},"sourceType":"module"}